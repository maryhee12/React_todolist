{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/maryjeong/react-tutorial/jh_todolist/src/TodoContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useReducer, createContext, useContext, useRef } from 'react';\nconst initialTodos = [{\n  id: 1,\n  text: 'HTML/CSS',\n  done: true\n}, {\n  id: 2,\n  text: 'JAVASCRIPT',\n  done: true\n}, {\n  id: 3,\n  text: 'REACT-APP',\n  done: false\n}, {\n  id: 4,\n  text: '강의듣기',\n  done: false\n}];\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE':\n      return state.concat(action.todo);\n    // action 안에 todo항목 넣어서 \n\n    case 'TOGGLE':\n      return state.map(todo => todo.id === action.id ? { ...todo,\n        done: !todo.done\n      } : todo);\n\n    case 'REMOVE':\n      return state.filter(todo => todo.id !== action.id);\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n} //state, dispatch context 두개 만들기\n\n\nconst TodoStateContext = /*#__PURE__*/createContext();\nconst TodoDispatchContext = /*#__PURE__*/createContext();\nconst TodoNextIdContext = /*#__PURE__*/createContext(); // Provider 상태관리하는 컴포넌트 만들기\n\nexport function TodoProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n  return /*#__PURE__*/_jsxDEV(TodoStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(TodoDispatchContext.Provider, {\n      value: dispatch,\n      children: /*#__PURE__*/_jsxDEV(TodoNextIdContext.Provider, {\n        value: nextId,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n} // 두개의 hook만들기\n\n_s(TodoProvider, \"MLelIZr2z8XWFJ9lCw3UijgeTSM=\");\n\n_c = TodoProvider;\nexport function useTodoState() {\n  _s2();\n\n  const context = useContext(TodoStateContext);\n\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n\n  return context;\n}\n\n_s2(useTodoState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useTodoDispatch() {\n  _s3();\n\n  const context = useContext(TodoDispatchContext);\n\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n\n  return context;\n}\n\n_s3(useTodoDispatch, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useTodoNextId() {\n  _s4();\n\n  const context = useContext(TodoNextIdContext);\n\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n\n  return context;\n}\n\n_s4(useTodoNextId, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"sources":["/Users/maryjeong/react-tutorial/jh_todolist/src/TodoContext.js"],"names":["React","useReducer","createContext","useContext","useRef","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","dispatch","nextId","useTodoState","context","useTodoDispatch","useTodoNextId"],"mappings":"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","sourcesContent":["import React, { useReducer, createContext, useContext ,useRef} from 'react';\n\nconst initialTodos = [   \n  {\n    id: 1,\n    text: 'HTML/CSS',\n    done: true\n  },\n  {\n    id: 2,\n    text: 'JAVASCRIPT',\n    done: true\n  },\n  {\n    id: 3,\n    text: 'REACT-APP',\n    done: false\n  },\n  {\n    id: 4,\n    text: '강의듣기',\n    done: false\n  }\n];\n\nfunction todoReducer(state, action){\n  switch(action.type){\n    case 'CREATE':\n      return state.concat(action.todo);  // action 안에 todo항목 넣어서 \n    case 'TOGGLE':\n      return state.map(todo => \n        todo.id === action.id ? {...todo, done: !todo.done} : todo\n        );\n    case 'REMOVE':\n      return state.filter(todo => todo.id !== action.id ) \n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);    \n  }\n}\n\n//state, dispatch context 두개 만들기\nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\n\n\n// Provider 상태관리하는 컴포넌트 만들기\nexport function TodoProvider( { children }){\n\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n  \n  return(\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        <TodoNextIdContext.Provider value={nextId}>\n          {children}\n        </TodoNextIdContext.Provider>\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n}\n\n// 두개의 hook만들기\nexport function useTodoState() {\n  const context = useContext(TodoStateContext);\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n  return context;\n}\n\nexport function useTodoDispatch() {\n  const context = useContext(TodoDispatchContext);\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n  return context;\n}\n\nexport function useTodoNextId() {\n  const context = useContext(TodoNextIdContext);\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n  return context;\n}"]},"metadata":{},"sourceType":"module"}